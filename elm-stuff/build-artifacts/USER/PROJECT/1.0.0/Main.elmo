Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Graph = Elm.Graph.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input$Field = Elm.Graphics.Input.Field.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $RNG = Elm.RNG.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Trampoline = Elm.Trampoline.make(_elm);
   var combine = A2($List.foldr,
   $Signal.map2(F2(function (x,y) {
      return A2($List._op["::"],
      x,
      y);
   })),
   $Signal.constant(_L.fromArray([])));
   var dsums = F3(function (n,
   carry,
   state) {
      return _U.eq(n,
      0) ? _L.fromArray([]) : A2($List._op["::"],
      $RNG.getDSum(state),
      A3(dsums,
      n - 1,
      carry,
      A2($RNG.rngStep,carry,state)));
   });
   var dsumPath = F3(function (n,
   carry,
   state) {
      return $List.map(function (_v0) {
         return function () {
            switch (_v0.ctor)
            {case "_Tuple2":
               return {ctor: "_Tuple2"
                      ,_0: $Basics.toFloat(_v0._0)
                      ,_1: $Basics.toFloat(_v0._1)};}
            _U.badCase($moduleName,
            "on line 71, column 47 to 67");
         }();
      })(A2($List.map2,
      F2(function (v0,v1) {
         return {ctor: "_Tuple2"
                ,_0: v0
                ,_1: v1};
      }),
      _L.range(0,n - 1))(A3(dsums,
      n,
      carry,
      state)));
   });
   var iterate$ = F3(function (n,
   f,
   x) {
      return _U.eq(n,
      0) ? $Trampoline.Done(x) : $Trampoline.Continue(function (_v4) {
         return function () {
            switch (_v4.ctor)
            {case "_Tuple0":
               return A3(iterate$,
                 n - 1,
                 f,
                 f(x));}
            _U.badCase($moduleName,
            "on line 68, column 37 to 58");
         }();
      });
   });
   var iterate = F3(function (n,
   f,
   x) {
      return $Trampoline.trampoline(A3(iterate$,
      n,
      f,
      x));
   });
   var contentString = function (content) {
      return content.string;
   };
   var hRandomSubInput = $Signal.mailbox($Graphics$Input$Field.noContent);
   var hRandomSubField = A2($Signal._op["<~"],
   A3($Graphics$Input$Field.field,
   $Graphics$Input$Field.defaultStyle,
   $Signal.message(hRandomSubInput.address),
   "hRandomSub"),
   hRandomSubInput.signal);
   var hRandomSubSignal = A2($Signal._op["<~"],
   function ($) {
      return $Maybe.withDefault(0)($Result.toMaybe($String.toInt(contentString($))));
   },
   hRandomSubInput.signal);
   var hRandomAddInput = $Signal.mailbox($Graphics$Input$Field.noContent);
   var hRandomAddField = A2($Signal._op["<~"],
   A3($Graphics$Input$Field.field,
   $Graphics$Input$Field.defaultStyle,
   $Signal.message(hRandomAddInput.address),
   "hRandomAdd"),
   hRandomAddInput.signal);
   var hRandomAddSignal = A2($Signal._op["<~"],
   function ($) {
      return $Maybe.withDefault(0)($Result.toMaybe($String.toInt(contentString($))));
   },
   hRandomAddInput.signal);
   var cycleInput = $Signal.mailbox($Graphics$Input$Field.noContent);
   var cycleField = A2($Signal._op["<~"],
   A3($Graphics$Input$Field.field,
   $Graphics$Input$Field.defaultStyle,
   $Signal.message(cycleInput.address),
   "cycle"),
   cycleInput.signal);
   var cycleSignal = A2($Signal._op["<~"],
   function ($) {
      return $Maybe.withDefault(0)($Result.toMaybe($String.toInt(contentString($))));
   },
   cycleInput.signal);
   var rDivInput = $Signal.mailbox($Graphics$Input$Field.noContent);
   var rDivField = A2($Signal._op["<~"],
   A3($Graphics$Input$Field.field,
   $Graphics$Input$Field.defaultStyle,
   $Signal.message(rDivInput.address),
   "rDiv"),
   rDivInput.signal);
   var rDivSignal = A2($Signal._op["<~"],
   function ($) {
      return $Maybe.withDefault(0)($Result.toMaybe($String.toInt(contentString($))));
   },
   rDivInput.signal);
   var initialRNGState = A2($Signal._op["~"],
   A2($Signal._op["~"],
   A2($Signal._op["~"],
   A2($Signal._op["<~"],
   $RNG.rngState,
   rDivSignal),
   cycleSignal),
   hRandomAddSignal),
   hRandomSubSignal);
   var output = A2($Signal._op["<~"],
   $Graphics$Element.show,
   A2($Signal._op["<~"],
   A2(iterate,
   3000,
   $RNG.rngStep(0)),
   initialRNGState));
   var dsumGraph = A2($Signal._op["<~"],
   function ($) {
      return A2($Graph.graph,
      $Maybe.Just({ctor: "_Tuple2"
                  ,_0: 0
                  ,_1: 1500}),
      $Maybe.Just({ctor: "_Tuple2"
                  ,_0: 0
                  ,_1: 255}))($List.repeat(1)(A2(dsumPath,
      1500,
      0)($)));
   },
   initialRNGState);
   var main = A2($Signal._op["<~"],
   $Graphics$Element.flow($Graphics$Element.down),
   combine(_L.fromArray([rDivField
                        ,cycleField
                        ,hRandomAddField
                        ,hRandomSubField
                        ,output
                        ,A2($Signal._op["<~"],
                        A2($Graph.drawGraph,700,400),
                        dsumGraph)])));
   _elm.Main.values = {_op: _op
                      ,rDivInput: rDivInput
                      ,rDivField: rDivField
                      ,rDivSignal: rDivSignal
                      ,cycleInput: cycleInput
                      ,cycleField: cycleField
                      ,cycleSignal: cycleSignal
                      ,hRandomAddInput: hRandomAddInput
                      ,hRandomAddField: hRandomAddField
                      ,hRandomAddSignal: hRandomAddSignal
                      ,hRandomSubInput: hRandomSubInput
                      ,hRandomSubField: hRandomSubField
                      ,hRandomSubSignal: hRandomSubSignal
                      ,initialRNGState: initialRNGState
                      ,output: output
                      ,contentString: contentString
                      ,iterate: iterate
                      ,iterate$: iterate$
                      ,dsumPath: dsumPath
                      ,dsums: dsums
                      ,combine: combine
                      ,dsumGraph: dsumGraph
                      ,main: main};
   return _elm.Main.values;
};